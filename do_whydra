#!/usr/bin/env python

import sys, os
from optparse import OptionParser
from subprocess import Popen, PIPE, STDOUT

inpt_templ = """
%s.ast
%s
%i
%i
y
%i
%f
y
%i
%f

"""[1:-1]


usage = "Usage: %prog [options] basefn"
parser = OptionParser(usage=usage)
parser.add_option("-f", "--nfops", type='int', default=5,
                  help="Number of FOPs to assign (default 5)", metavar="NFOPS")
parser.add_option("-s", "--nsky", type='int', default=10,
                  help="Number of sky fibers to assign (default 10)", metavar="NSKY")
parser.add_option("-r", "--nrot", type='int', default=7,
                  help="Number of times to tweak rotation. Must be odd (default 7)", metavar="NROT")
parser.add_option("-c", "--ncen", type='int', default=7,
                  help="Number of times to tweak center. Must be odd (default 7)", metavar="NCEN")
parser.add_option("-R", "--rot", type='float', default=0.1,
                  help="Amplitude of rotation tweak (default 0.1)", metavar="ROTAMP")
parser.add_option("-C", "--cen", type='float', default=1,
                  help="Amplitude of center tweak (default 1)", metavar="CENAMP")
parser.add_option("-e", "--hydraenv", default='~/hydra_simulator/hydra.env',
                  help="Path to hydra environment file (default ~/hydra_simulator/hydra.env)", metavar="HENV")
parser.add_option("--autoremove", default=False, action='store_true',
                  help="Remove hydra file if present without prompting.")

(ops, args) = parser.parse_args()

if len(args) != 1:
    print 'Need to specify base filename and no other positional arguments!'
    sys.exit(1)

basefn = args[0]

inpt = inpt_templ % (basefn, basefn,
                     ops.nfops, ops.nsky,
                     ops.nrot, ops.rot,
                     ops.ncen, ops.cen)

outfn = basefn + '.hydra'
if os.path.exists(outfn):
    if ops.autoremove:
        print 'Removing', outfn
        os.remove(outfn)
    else:
        res = raw_input('File ' + outfn + ' exists! Remove? y/[n]: ')
        if res == 'y':
            os.remove(outfn)
        else:
            print 'Whydra cannot proceed if output file is present. Exiting.'
            sys.exit(2)

outf = open(basefn + '.whydralog', 'w')
try:
    cmdline = 'source %s; whydra' % (ops.hydraenv)
    print 'Running "' + cmdline + '" with input:\n', inpt
    p = Popen(cmdline, shell=True, stdin=PIPE, stdout=outf)
    p.communicate(inpt)
    retcode = p.wait()

    if retcode == 0:
        print 'whydra finished sucessfully.  Results logged to:', outf.name
    else:
        print 'whydra failed with retcode %i!  Results logged to:' % retcode, outf.name

finally:
    outf.close()
